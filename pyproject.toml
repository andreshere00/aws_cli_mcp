[project]
name = "aws-mcp"
version = "0.1.0"
description = "Application to provide methods to communicate AWS with MCP"
readme = "README.md"
requires-python = ">=3.12"
dependencies = [
    "boto3>=1.40.30",
    "fastmcp>=2.12.3",
    "openai>=1.107.2",
    "python-dotenv>=1.1.1",
    "typer>=0.17.4",
]

[dependency-groups]
dev = [
    "black>=25.9.0",
    "flake8>=7.3.0",
    "isort>=6.0.1",
    "pytest>=8.4.2",
    "pytest-cov>=5.0.0",
    "pre-commit>=3.8.0",
    "ruff>=0.6.8",
    "poethepoet>=0.28.0",
    "autoflake>=2.3.1",
]

[tool.black]
line-length = 100
target-version = ["py312"]

[tool.isort]
profile = "black"
line_length = 100
skip = [".venv", "build", "dist"]

[tool.ruff]
line-length = 100
exclude = [".venv", "build", "dist"]

[tool.flake8]
max-line-length = 100

[tool.poe.tasks]
install = { cmd = "uv sync", help = "Install project dependencies" }
pre-commit-install = { cmd = "uv run pre-commit install", help = "Install pre-commit hooks" }
pre-commit-run = { cmd = "uv run pre-commit run --all-files", help = "Run pre-commit" }
tests = { cmd = "uv run pytest -q", help = "Execute tests" }
coverage = { cmd = "uv run pytest --maxfail=1 --disable-warnings --cov=src --cov-report=term-missing", help = "Execute tests with coverage" }
setup = { sequence = ["install", "pre-commit-install", "pre-commit-run"], help = "Install deps, set up hooks, lint all files once" }
style = { cmd = "sh -c 'uv run autoflake --in-place --remove-all-unused-imports --remove-unused-variables --recursive src tests && uv run isort . && uv run black . && uv run ruff format . && uv run flake8 --config pyproject.toml src tests'", help = "Run autoflake, isort, black, ruff (fix), then flake8 with consistent 100-char limit" }
clean = { cmd = "find . \\( -type d -name __pycache__ -exec rm -rf {} + \\) -o \\( -type f -name '*.py[co]' -delete \\)", help = "Clean all the temporal and cache-related iles" }
